---
title: "Dataset - Rural-Urban Classification"
author: "Matthew Hoctor, PharmD"
date: last-modified

quarto::html_document:
  theme: cerulean
  highlight: github

toc: true
toc-depth: 4
toc-location: left
toc-title: Contents

code-fold: show
code-overflow: wrap
code-tools: true
code-link: true

editor: source
---

```{r}
#| label: setup
## load libraries:
library(tidyverse)      # dplyr, lubridate, stringr, etc, etc, etc
library(janitor)        # adorn_totals()
library(fst)            # read/write .fst files
library(data.table)     # ?is this package necessary?
library(readxl)         # read excel files
# library(readODS)      # to read .ods file
# library(campfin)      # for working with abbreviations in US place names
# library(SUNGEO)       # for batch geocoding from OSM
# library(fipio)        # coords_to_fips()
# library(zipcodeR)     # for finding zipcode centroid coords
# library(tidygeocoder) # for batch geocoding from multiple sources in parallel
# library(tidycensus)   # ?county name to FIPS?
# library(tigris)       # counties(): download year-specific county data
```

# Overview

This project looks to understand the impact of the Comprehensive Addiction and Recovery Act (CARA) of 2016 on patterns of buprenorphine prescribing practices by examining openly available medicare part D data.

The steps in this page require that the data be downloaded first (see the [data download](https://matthew-hoctor.github.io/BupRx/dl.html) page), and for the [treatment variables](https://matthew-hoctor.github.io/BupRx/dataset_tx.html) to be compiled.  The scripts below show the data generation process.

Using the USGS Populated Places dataset, we will attempt to convert the city/state data from the dataset into a a FIPS code, which will be used to lookup the CDC's 2013 Urban-Rural Classification using the following steps:

 - The USGS dataset (which can be found as a text file within their Geographic Names Information System (GNIS) [here](https://www.usgs.gov/us-board-on-geographic-names/download-gnis-data)) contains several variables including the state name/FIPS, the 'map name' (which is often the city name), and the county name/FIPS.  The first step will be to lookup the city/state in this dataset and retrieve the full FIPS.
 - Lookup rural-urban clssification: For this step we can use the FIPS code to lookup the CDC's [2013 Urban-Rural Classification Scheme for Counties](https://www.cdc.gov/nchs/data_access/urban_rural.htm); specifically using the [NCHSurbruralcodes Spreadsheet](https://www.cdc.gov/nchs/data/data_acces_files/NCHSURCodes2013.xlsx) which contains the FIPS codes and rural-urban classifications for each county in the US.

NB the CDC provides a helpful summary of [County Geography Changes: 1990-present](https://www.cdc.gov/nchs/nvss/bridged_race/county_geography-_changes1990-present.pdf).

# Load data

```{r}
#| label: load_datasets
#| output: false
# Load the dataset from the prior step:
load(file = "dataset/data_fips.RData")
load(file = "dataset/addresses_geo.RData")


# Load the NCHSURC dataset:
#| label: NCHSURC_dataset
nchsurc <- read_excel(
  "data/NCHSURCodes2013.xlsx",
  col_names = TRUE) |>
  # rename the FIPS code NCHSURC variables (to make the left_join simpler):
  rename(fips = `FIPS code`, nchsurc = `2013 code`) |>
  # convert the numerical value of the fips variable to a 5-numeral character
  mutate(fips = str_pad(fips, width = 5, pad = "0")) |>
  select(fips, nchsurc)
```

# Manual fips codes

```{r}
addresses_geo |>
  filter(is.na(fips_geo) & (group == "geocode")) |>
  arrange(Prscrbr_State_Abrvtn, Prscrbr_City) |>
  select(address)
```

```{r}
#| label: manual_search
data_fips <- data_fips |>                                   # x dataset
 left_join(
   data.frame(                                              # y dataset
     address = c( # 0
       "221 E Hampden Ave, Englewood, CO 80113",            # 1
       "499 E Hampden Ave, Englewood, CO 80113",
       "601 E Hampden Ave, Englewood, CO 80113",
       "799 E Hampden Avenue, Englewood, CO 80113",
       "799 E Hampden Ave, Englewood, CO 80113",
       "2955 S Broadway, Englewood, CO 80113",
       "701 E Hampden Ave, Englewood, CO 80113",
       "3333 S Bannock St, Englewood, CO 80110",
       "3277 S Lincoln St, Englewood, CO 80113",
       "499 E Hampden Ave Ste 220, Englewood, CO 80113",    # 10
       "499 East Hampden Avenue, Englewood, CO 80113",
       "799 E Hampden Ave Ste 315, Englewood, CO 80113",
       "3330 S Broadway, Englewood, CO 80151",
       "499 E Hampden Ave Ste 100, Englewood, CO 80113",
       "750 W Hampden Ave Ste 105, Englewood, CO 80110",
       "3701 S Broadway, Englewood, CO 80113",
       "3515 S Delaware St, Englewood, CO 80110",
       "3460 S Federal Blvd, Englewood, CO 80110",
       "799 E Hampden Ave Ste 300, Englewood, CO 80113",
       "499 E Hampden Ave Ste 360, Englewood, CO 80113",    # 20
       "730 W. Hampden Ave., Englewood, CO 80110",
       "5257 S Wadsworth Blvd, Littleton, CO 80123",
       "6169 S Balsam Way, Littleton, CO 80123",
       "6179 S Balsam Way, Littleton, CO 80123",
       "6901 S Pierce St, Littleton, CO 80128",
       "7335 S Pierce St, Littleton, CO 80128",
       "6169 South Balsam Way, Littleton, CO 80123",
       "7325 S Pierce St Ste 102, Littleton, CO 80128",
       "5066 S Wadsworth Blvd, Littleton, CO 80123",
       "7345 S Pierce St Ste 110, Littleton, CO 80128",    #30
       "107b Ala Malama St, Kaunakakai, HI 96748",
       "30 Oki Place, Kaunakakai, HI 96748",
       "28 Kamoi St, Kaunakakai, HI 96748",
       "30 Oki Place #2040, Kaunakakai, HI 96748",
       "112 Champagne Blvd, Breaux Bridge, LA 70517",
       "1555 Gary Dr Ste C, Breaux Bridge, LA 70517",
       "209 Champagne Blvd., Breaux Bridge, LA 70517",
       "548 Lakes Blvd, Breaux Bridge, LA 70517",
       "131 Emerald St, Wrentham, MA 02093",
       "6020 Richmond Hwy Ste 100, Alexandria, VA 22303", # 40
       "6201 Centreville Rd, Centreville, VA 20121",
       "13880 Braddock Rd, Centreville, VA 20121",
       "6138 Redwood Square Ctr Ste 204, Centreville, VA 20121",
       "247 Ramble Rd, Collinsville, VA 24078",
       "3155 Earlysville Rd, Earlysville, VA 22936",
       "9901 Braddock Rd, Fairfax, VA 22032",
       "4887 Wheatstone Dr, Fairfax, VA 22032",
       "3058 River Rd W, Goochland, VA 23063", 
       "3737 W Main St Ste 101, Salem, VA 24153",
       "160 Warrior Dr, Stephens City, VA 22655",        # 50
       "640 Warrior Dr, Stephens City, VA 22655",
       "13199 Centerpointe Way, Woodbridge, VA 22193",
       "2296 Opitz Blvd, Woodbridge, VA 22191",
       "14904 Jefferson Davis Hwy, Woodbridge, VA 22191",
       "1954 Opitz Blvd # 7, Woodbridge, VA 22191",
       "14139 Potomac Mills Rd, Woodbridge, VA 22193",
       "2022 Opitz Blvd Ste B, Woodbridge, VA 22191",
       "2200 Opitz Blvd Ste 235, Woodbridge, VA 22191",
       "2280 Opitz Blvd, Woodbridge, VA 22191",
       "2200 Opitz Blvd, Woodbridge, VA 22191",         # 60
       "14605 Potomac Branch Dr, Woodbridge, VA 22191",
       "1954 Opitz Blvd Unit 7, Woodbridge, VA 22191",
       "14605 Potomac Branch Dr Ste 100, Woodbridge, VA 22191",
       "13168 Centerpointe Way, Woodbridge, VA 22193",
       "1954 Opitz Blvd, Woodbridge, VA 22191",
       "2010 Opitz Blvd Ste A, Woodbridge, VA 22191",
       "1900 Opitz Blvd Ste F, Woodbridge, VA 22191",
       "5808 Mapledale Plz, Woodbridge, VA 22193",
       "2701 Neabsco Common Pl, Woodbridge, VA 22191"),
     fips_manual = c(
       "08031", # 1
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08005", # 10
       "08005", 
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08005",
       "08031",
       "08005",
       "08005", # 20
       "08005", 
       "08059",
       "08059",
       "08059",
       "08059",
       "08059",
       "08059",
       "08059",
       "08059",
       "08059", # 30
       "15005", 
       "15009",
       "15009",
       "15009",
       "22099",
       "22099",
       "22099",
       "22099",
       "25021",
       "51059", # 40
       "51059", 
       "51059",
       "51059",
       "51089",
       "51003",
       "51059",
       "51059",
       "51075",
       "51161",
       "51069", # 50
       "51069", 
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153", # 60
       "51153", 
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153",
       "51153"  # 69
     )),
   by = join_by(address == address),
   relationship = "many-to-one") |>
  # fold geocoded fips codes into main fips var
  mutate(fips = if_else(
    !is.na(fips_manual),
    fips_manual, 
    fips))
```

```{r}
sum(is.na(data_fips$fips))
```


# Matching to NCHSURC Dataset

## Match

We will proceed to match the FIPS codes in the dataset.  Note that in principle we could recalculate the rural-urban classification for each year using the [census estimates](https://www.census.gov/programs-surveys/popest/data/data-sets.html), but instead will map the dataset onto the 2013 codes so that the variable remains constant over time.  Starting by looking up NCHSUR code, and tabulate how many NA values are there for fips and state:

```{r}
# match fips to NCHSURC
data_nchsurc <- data_fips |>       # the 'left' dataset
  left_join(
    nchsurc,                       # the 'right' dataset
    by = join_by(fips == fips),    # variables must exactly match
    relationship = "many-to-one",  # will not work w/o specifying relation
)

# tabulate missing
data_nchsurc |>
  group_by(Prscrbr_State_Abrvtn, fips) |>
  summarise(
    Missing_NCHSURC = sum(is.na(nchsurc)),
    N = n()
    ) |>
  filter(Missing_NCHSURC != 0) |>
  arrange(desc(Missing_NCHSURC)) |>
  adorn_totals()
```

## AK fips codes

How many NA values in AK by fips and place:

```{r}
data_nchsurc |>
  filter(Prscrbr_State_Abrvtn == "AK") |>
  group_by(city_fixed, fips) |>
  summarise(
    Missing_NCHSURC = sum(is.na(nchsurc)),
    N = n()
    ) |>
  filter(Missing_NCHSURC != 0) |>
  arrange(desc(Missing_NCHSURC)) |>
  adorn_totals()
```

Revisiting CDC's summary of [County Geography Changes: 1990-present](https://www.cdc.gov/nchs/nvss/bridged_race/county_geography-_changes1990-present.pdf), we can see that the FIPS code 02063 was the "Valdez-Cordova Census Area" (FIPS code 02261) at the time of the NCHSURC dataset.  We can manually update this entry:

```{r}
data_nchsurc <- data_nchsurc |>
  select(-nchsurc) |>
  mutate(fips = if_else(fips == "02063", "02261", fips)) |>
  # mutate(nchsurc = if_else(fips == "02063", "02261", nchsurc)) |>
  # re-join the NCHSURC dataset to update the fips code
  left_join(
    nchsurc,                              # the 'right' dataset
    by = join_by(fips == fips),           # these variables must exactly match in both datasets
    relationship = "many-to-one")         # left_join will not work without specifying this relation

sum(is.na(nchsurc))
```

## CT

Apparently [CT has switched from counties to planning ditricts](https://www.federalregister.gov/documents/2022/06/06/2022-12063/change-to-county-equivalents-in-the-state-of-connecticut), and the new codes are in the USGS dataset, but not in the NCHSURC dataset (as this dataset preceeds the switch).

```{r}
data_nchsurc |>
  filter(Prscrbr_State_Abrvtn == "CT") |>
  group_by(fips) |>
  summarise(
    Missing_NCHSURC = sum(is.na(nchsurc)),
    N = n()
    ) |>
  arrange(desc(N)) |>
  adorn_totals()
```

Apparently filtering counties formed after 2014 from the USGS dataset has obviated the issue of CT updating its counties.

## Set Urban/Rural Classification

Cleanup: Correct values of query and state, remove unneeded variables, etc:

```{r}
data_nchsurc <- data_nchsurc |>
  # Remove unneeded variables
  select(-city_fixed, -fips0, -fips1) |>
  # relocate address variables to after Prscrbr_State_FIPS
  relocate(
    any_of(c("Prscrbr_St1", "Prscrbr_St2", "Prscrbr_zip5", "address", "fips")),
    .after = Prscrbr_State_FIPS
    )

# check for missing values
sum(is.na(data_nchsurc$query0))
sum(is.na(data_nchsurc$fips))
```

view values of nchsurc$nchsurc

```{r}
data_nchsurc |>
  group_by(nchsurc) |>
  summarise(n = n()) |>
  arrange(desc(n))
```

set urban/rural classification

```{r}
data_nchsurc$ur <- if_else(
  data_nchsurc$nchsurc %in% c("5", "6"),     # if nchsurc is rural
  "rural",                                   # then rural
  "urban",                                   # else urban
)
```

Tabulate condensed RUCA class vs NCHSURC

```{r}
data_nchsurc$RUCA_class <- case_when(
    data_nchsurc$Prscrbr_RUCA < 4 ~ "Metropolitan",
    data_nchsurc$Prscrbr_RUCA < 7 ~ "Micropolitan",
    data_nchsurc$Prscrbr_RUCA < 10 ~ "Small Town",
    data_nchsurc$Prscrbr_RUCA < 99 ~ "Rural",
    .default = "Not Coded")
data_nchsurc$NCHSURC_class <- case_when(
    data_nchsurc$nchsurc == 1 ~ "Large central metro",
    data_nchsurc$nchsurc == 2 ~ "Large fringe metro",
    data_nchsurc$nchsurc == 3 ~ "Medium metro",
    data_nchsurc$nchsurc == 4 ~ "Small metro",
    data_nchsurc$nchsurc == 5 ~ "Micropolitan",
    data_nchsurc$nchsurc == 6 ~ "Non-core")
# table
table(data_nchsurc$RUCA_class, data_nchsurc$nchsurc)
```

Cleanup and reorder variables

```{r}
data_nchsurc <- data_nchsurc |>
  relocate(
    any_of(c("Prscrbr_RUCA", "RUCA_class", "nchsurc", "NCHSURC_class", "ur")),
    .after = fips_manual)
```

# Save datasets

Save datasets, and cleanup:

```{r}
save(
  data_nchsurc,
  file = "dataset/data_nchsurc.RData",
  compress = TRUE,
  compression_level = 9
)
```

# Other Thoughts

Indication for OUD use (vs pain or EtOH use disorder) is a potential source of error when classifying prescriptions in the `tx` variable.  Consider future methods to potentially validate OUD vs pain treatment designations (as time allows):

 - Classify prescriptions as OUD vs pain vs EtOH use disorder based on KNN of names of other drugs prescribed by the provider
 - Query [FDA NDC DB](https://open.fda.gov/apis/drug/ndc/how-to-use-the-endpoint/) for NPIs associated with the values of `Brnd_Name` and `Gnrc_Name` which were matched above, then search those NDCs for the indication for use on DailyMed
 - Check DEA X waver for prescriber's NPI
 - Check prescriber's buprenorphine panel limit vs count of buprenorphine prescribed
 - Check prescriber's place of work in NPI DB
 - interrogate/validate CMS's method for translating a drug's NDC into a drug's brand and generic names
 - recalculate the rural-urban classification for each year using the [census estimates](https://www.census.gov/programs-surveys/popest/data/data-sets.html)

Translation from NDC to a drug's brand/generic names likely simplifies many analyses, but could be a significant source of bias for our analysis.

## Alternate Approaches to Geocoding, Reverse Geocoding & NCHSURC classification

Alternate geocoding:

 - The `geocode()` function from the `ggmap` package to find the coordinates for each city/state combination.  The function will return a dataframe with the coordinates for each city/state combination, and will also return a status code indicating whether the coordinates were found successfully.  We will use the status code to filter out any entries for which the coordinates were not found.  This method requires access to the google API.

Alternate reverse-geocoding:

   - The `fips()` function from the `USAboundaries` package to convert the coordinates to FIPS code.  This function uses the `sf` package to find the FIPS code for the county in which the coordinates are located.  This method is the most straightforward, but it is also the slowest.
   - The `fips()` function from the `tigris` package to convert the coordinates to FIPS code.  This function uses the `sf` package to find the FIPS code for the county in which the coordinates are located.  This method is faster than the `USAboundaries` method, but it is still relatively slow.
   - The `fips()` function from the `MazamaSpatialUtils` package to convert the coordinates to FIPS code.  This function uses a lookup table to find the FIPS code for the county in which the coordinates are located.  This method is the fastest, but it is also the least accurate.  The lookup table is based on the 2010 census, so it will not include any counties that were created after 2010.  This method will also not work for any coordinates that are outside of the US.

Rural-urban classification:

 - Lookup rural-urban clssification: For this step we can used CDC's [2013 Urban-Rural Classification Scheme for Counties](https://www.cdc.gov/nchs/data_access/urban_rural.htm); specifically the [NCHSurbruralcodes Spreadsheet](https://www.cdc.gov/nchs/data/data_acces_files/NCHSURCodes2013.xlsx) which contains the FIPS codes and rural-urban classifications for each county in the US.  The data can be plotted according to FIPS code using `ggplot2` or `MazamaSpatialPlots` packages.
 - Alternatively the classification could be manually recalculated from census data for each year.

# Session Info

```{r}
sessionInfo()
```
